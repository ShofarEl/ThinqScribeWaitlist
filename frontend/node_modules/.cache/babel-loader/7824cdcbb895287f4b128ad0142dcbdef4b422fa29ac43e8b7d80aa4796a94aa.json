{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`Making ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} request to ${config.url}`);\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2;\n  console.error('Response error:', error);\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n    console.error('Endpoint not found');\n  } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) >= 500) {\n    console.error('Server error');\n  }\n  return Promise.reject(error);\n});\n\n// Waitlist API functions\nexport const waitlistAPI = {\n  // Add new entry to waitlist\n  addEntry: async entryData => {\n    try {\n      const response = await api.post('/waitlist', entryData);\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error;\n    }\n  },\n  // Get all waitlist entries\n  getEntries: async (params = {}) => {\n    try {\n      const response = await api.get('/waitlist', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error;\n    }\n  },\n  // Get single entry by ID\n  getEntry: async id => {\n    try {\n      const response = await api.get(`/waitlist/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error;\n    }\n  },\n  // Update entry\n  updateEntry: async (id, entryData) => {\n    try {\n      const response = await api.put(`/waitlist/${id}`, entryData);\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error;\n    }\n  },\n  // Delete entry\n  deleteEntry: async id => {\n    try {\n      const response = await api.delete(`/waitlist/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error;\n    }\n  },\n  // Get statistics\n  getStats: async () => {\n    try {\n      const response = await api.get('/waitlist/stats/overview');\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error;\n    }\n  },\n  // Health check\n  healthCheck: async () => {\n    try {\n      const response = await api.get('/health');\n      return response.data;\n    } catch (error) {\n      var _error$response9;\n      throw ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","_error$response","_error$response2","status","waitlistAPI","addEntry","entryData","post","data","_error$response3","getEntries","params","get","_error$response4","getEntry","id","_error$response5","updateEntry","put","_error$response6","deleteEntry","delete","_error$response7","getStats","_error$response8","healthCheck","_error$response9"],"sources":["C:/Users/USER/Documents/ThinqSribeWaitlist/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`Making ${config.method?.toUpperCase()} request to ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('Response error:', error);\r\n    \r\n    if (error.response?.status === 404) {\r\n      console.error('Endpoint not found');\r\n    } else if (error.response?.status >= 500) {\r\n      console.error('Server error');\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Waitlist API functions\r\nexport const waitlistAPI = {\r\n  // Add new entry to waitlist\r\n  addEntry: async (entryData) => {\r\n    try {\r\n      const response = await api.post('/waitlist', entryData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error;\r\n    }\r\n  },\r\n\r\n  // Get all waitlist entries\r\n  getEntries: async (params = {}) => {\r\n    try {\r\n      const response = await api.get('/waitlist', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error;\r\n    }\r\n  },\r\n\r\n  // Get single entry by ID\r\n  getEntry: async (id) => {\r\n    try {\r\n      const response = await api.get(`/waitlist/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error;\r\n    }\r\n  },\r\n\r\n  // Update entry\r\n  updateEntry: async (id, entryData) => {\r\n    try {\r\n      const response = await api.put(`/waitlist/${id}`, entryData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error;\r\n    }\r\n  },\r\n\r\n  // Delete entry\r\n  deleteEntry: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/waitlist/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error;\r\n    }\r\n  },\r\n\r\n  // Get statistics\r\n  getStats: async () => {\r\n    try {\r\n      const response = await api.get('/waitlist/stats/overview');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error;\r\n    }\r\n  },\r\n\r\n  // Health check\r\n  healthCheck: async () => {\r\n    try {\r\n      const response = await api.get('/health');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}